1. How to protect singleton from reflection api? ->
2. How to protect singleton from deserialization? - declare method as static as static members are not part of serialization.
3. How to create Doubleton?
4. collection vs stream
5. How to reverse string -> a)using reverse on SB b)iterative method c)recursion
6. Remove duplicate element from arraylist
7. notify() vs notifyAll()
8. how to swap two strings without using third variable/temp variable
9. Wildcard arguements? ->a) with unknown type b) with upper bound c) with lower bound.
10. can we use abstract and static together? -> No
11. Auto boxing and unboxing
12. spring cloud bus
13. What is Spring Cloud Data Flow?
14. Features of microservices?-> decoupling,componentization, autonomy,agility,decentralized governance
15. API gateway?
16. How to configure spring security?
17. How to secure a method in spring security using annotation?
    -> @Secured("ROLE_ADMIN")
       public void deleteUser(String name);
18. How to pre-authorize and post-authorize a method in spring security? -> @PreAuthorize ("hasRole('ROLE_WRITE')") and 
    @PostAuthorize ("returnObject.owner == authentication.name")
19. How to enable method level security in spring?
    -> <global-method-security secured-annotations="enabled", pre-post-annotations="enabled"/>
20. How to enable web security using java configuration in spring?
    ->  @Configuration
        @EnableWebSecurity
        public class SecurityConfig extends WebSecurityConfigurerAdapter {}
21. How to configure DispatcherServlet without web.xml in Spring MVC?
    ->  public class WebAppInitializer implements WebApplicationInitializer {
         public void onStartup(ServletContext servletContext) throws ServletException {  
              AnnotationConfigWebApplicationContext ctx = new AnnotationConfigWebApplicationContext();  
              ctx.register(AppConfig.class);  
              ctx.setServletContext(servletContext);    
              Dynamic dynamic = servletContext.addServlet("dispatcher", new DispatcherServlet(ctx));  
              dynamic.addMapping("/");  
              dynamic.setLoadOnStartup(1);  
         }  
        }
22. How to achieve thread safety in java?
    a) Stateless Implementation - Method should neither relies on external state nor maintain state at all.Declare all variiables
    in method only.
        example - factorial program
    b) Immutable class
    c) Thread local fields - we can create thread-safe classes that donâ€™t share state between threads by making their fields 
        thread-local.
        public class ThreadA extends Thread {
            private final List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);
            @Override
            public void run() {
                numbers.forEach(System.out::println);
            }
        }
    d) Synchronized collections - Collections.synchronizedCollection(new ArrayList<>());
    e) Concurrent Collections - Map<String,String> concurrentMap = new ConcurrentHashMap<>();
    f) Atomic objects - AtomicInteger, AtomicLong, AtomicBoolean, and AtomicReference
    g) Synchronized methods
    h) Synchronized blocks
    i) volatile fileld 
    j) Extrinsic locking - it uses an external entity to enforce exclusive access to the resource. synchronized methods and blocks
    rely on the 
                           this reference.
        Example - 
            public class ExtrinsicLockCounter {
                private int counter = 0;
                private final Object lock = new Object();
                public void incrementCounter() {
                    synchronized(lock) {
                        counter += 1;
                    }
                }
                // standard getter
            }
    k) Reentrant lock - preventing queued threads from suffering some types of resource starvation
    l) Read/Write lock
23) RequestParam vs Pathvariable?
    @RequestParam - used to request parameter from URL.Below date is RequestParam
    http://localhost:8080/shop/order/{orderId}/receipts?date=12-05-2017
    @PathVariable - used to extract value from URI.Above exmaple orderId is pathvariable
    Jersey annotations - PathParam & QueryParam
24) Encapsulation - restricting direct access to variables
25) Abstraction - hiding internal implementation.
    





======================================================
Shell Scripting
ksh - korn shell
bash - bourne again shell
sh - bourne shell

#!/bin/bash - bash is in bin folder
dd - to delete line
# - comment
echo - print
chmod +x "file_name" or chmod 755 "file_name" or chmod +x *
ls -l


